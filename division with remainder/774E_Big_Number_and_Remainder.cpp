#include <iostream>
#include <string>

using namespace std;

char num[200001];		// исходное делимое
int numLen,			// количество цифр делимого
m,				// делитель
temp,				// остаток
answer = 0;			// наименьший из остатков
int stepArr = 1;		// остаткок от деления степени числа 10 на m

int main() {
	// ввод данных
	cin >> num >> m;

	// определение количества цифр делимого 
	numLen = strlen(num);

	// нахождение остатка исходного числа
	answer += (num[numLen - 1] - 48) % m;
	for (int i = numLen - 2; i >= 0; i--) {
		stepArr = (stepArr * 10) % m;
		answer += ((num[i] - 48) * stepArr) % m;
		answer %= m;
	}

	// нахождение наименьшего остатка среди сдвигов числа
	/*  =============================================================================
		P - исходное число
		Q - сдвиг числа
		m - делитель
	    =============================================================================
		Сдвиг осуществляется следующим образом:

		P = a_n * 10^n + a_(n-1) * 10^(n-1) + ... + a_0

		Q = a_(n-1) * 10^n + ... + a_0 * 10 + a_n =
		  = (a_(n-1) * 10^(n-1) + ... + a_0) * 10 + a_n =
		  = (P - a_n * 10^n) * 10 + a_n
	    =============================================================================
		Учитывая свойства остатка от деления получаем:

		Q % m = ((P - a_n * 10^n) * 10 + a_n) % m

		Q % m = (((P % m - (a_n % m * 10^n % m) % m + m) % m * 10) % m + a_n % m) % m

		В скобке (P % m - (a_n % m * 10^n % m) % m + m) прибавляем m на случай,
		если P % m < (a_n % m * 10^n % m) % m

		Были опущены некоторые % m ввиду их ненадобности

		Количество сдвигов соответсвует количеству цифр в числе
	    ============================================================================= */
	// нахождение наименьшего остатка среди сдвигов числа
	temp = answer;
	for (int i = 0; i < numLen - 1; i++) {
		temp = ((((temp - (num[i] - 48) * stepArr) % m + m) * 10) % m + (num[i] - 48) % m) % m;
		if (num[i + 1] ^ 48) {
			if (answer > temp) {
				answer = temp;
			}
		}
	}
	cout << answer;

	return 0;
}
